

<%@ jet
    imports="
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType
        java.util.List
        java.util.Map      
    "
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName(); 

    String pathToWallet1Key = ElementParameterParser.getValue(node, "__WALLET_LOCATION__");
	String wallet1Password = ElementParameterParser.getValue(node, "__WALLET_PASSWORD__");	
    String contractAddress = ElementParameterParser.getValue(node,"__CONTRACT_ADDRESS__");

    Boolean CREATE_CONTRACT = ElementParameterParser.getValue(node, "__CREATE_CONTRACT__").equalsIgnoreCase("true");
	Boolean CREATE_CUSTOMER = ElementParameterParser.getValue(node, "__CREATE_CUSTOMER__").equalsIgnoreCase("true");
	Boolean GET_CUSTOMER = ElementParameterParser.getValue(node, "__GET_CUSTOMER__").equalsIgnoreCase("true");
    Boolean UPDATE_CUSTOMER = ElementParameterParser.getValue(node, "__UPDATE_CUSTOMER__").equalsIgnoreCase("true");
	Boolean DELETE_CUSTOMER = ElementParameterParser.getValue(node, "__DELETE_CUSTOMER__").equalsIgnoreCase("true");

    String createCustId = ElementParameterParser.getValue(node,"__CREATE_CUSTOMER_ID__");
    String createCustName = ElementParameterParser.getValue(node,"__CREATE_CUSTOMER_NAME__");
    String createCustAdds = ElementParameterParser.getValue(node,"__CREATE_CUSTOMER_ADDRESS__");
    String createCustDob = ElementParameterParser.getValue(node,"__CREATE_CUSTOMER_DOB__");
    String createCustAge = ElementParameterParser.getValue(node,"__CREATE_CUSTOMER_AGE__");

    String getCustId = ElementParameterParser.getValue(node,"__GET_CUSTOMER_ID__");

    String updateCustId = ElementParameterParser.getValue(node,"__UPDATE_CUSTOMER_ID__");
    String updateCustNewAdds = ElementParameterParser.getValue(node,"__CUSTOMER_NEW_ADDRESS__");

    String deleteCustId = ElementParameterParser.getValue(node,"__DELETE_CUSTOMER_ID__");
    


%>

System.out.println("MAIN JAVA CODE");
// Load Wallet1 Credentials

org.web3j.crypto.Credentials acc1Credentials_<%=cid%> = org.web3j.crypto.WalletUtils.loadCredentials(<%=wallet1Password%>, <%=pathToWallet1Key%>);
System.out.println("Wallet1 Credentials output:" + acc1Credentials_<%=cid%>);


System.out.println("Credentials loaded");
//System.out.println("Create simple contract");       


 <%
if( CREATE_CONTRACT ){
%>

com.test.helloworld.generated.Customer customer = com.test.helloworld.generated.Customer.deploy(
            web3j_<%=cid%>, acc1Credentials_<%=cid%>, org.web3j.tx.Contract.GAS_PRICE, org.web3j.tx.Contract.GAS_LIMIT).send();

        System.out.println("CONTRACT DEPLOYED RECEIPT::: " + customer.getTransactionReceipt());
        System.out.println("CONTRACT DEPLOYED AT ADDRESS::: " + customer.getContractAddress());
		 	  
<%}%>


<%
if( CREATE_CUSTOMER ){
%>


com.test.helloworld.generated.Customer customer = com.test.helloworld.generated.Customer.load(<%=contractAddress%>,
    web3j_<%=cid%>, acc1Credentials_<%=cid%>, org.web3j.tx.Contract.GAS_PRICE, org.web3j.tx.Contract.GAS_LIMIT);

    org.web3j.abi.datatypes.Utf8String id_<%=cid%> = new org.web3j.abi.datatypes.Utf8String(<%=createCustId%>);
    org.web3j.abi.datatypes.Utf8String name_<%=cid%> = new org.web3j.abi.datatypes.Utf8String(<%=createCustName%>);
    org.web3j.abi.datatypes.Utf8String address_<%=cid%> = new org.web3j.abi.datatypes.Utf8String(<%=createCustAdds%>);


    org.web3j.abi.datatypes.generated.Uint256 age_<%=cid%> = new org.web3j.abi.datatypes.generated.Uint256(<%=createCustAge%>);


    org.web3j.abi.datatypes.Utf8String dobStr_<%=cid%> = new org.web3j.abi.datatypes.Utf8String(<%=createCustDob%>);


        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy");

        java.util.Date da_<%=cid%> = sdf.parse(dobStr_<%=cid%>.toString());

        java.lang.Long d_<%=cid%> = da_<%=cid%>.getTime();

    org.web3j.abi.datatypes.generated.Uint256 dob_<%=cid%> = new org.web3j.abi.datatypes.generated.Uint256(d_<%=cid%>);


    org.web3j.protocol.core.methods.response.TransactionReceipt result_<%=cid%> = customer.insert(id_<%=cid%>, name_<%=cid%>, address_<%=cid%>, dob_<%=cid%>, age_<%=cid%>).sendAsync().get();

        System.out.println("CUSTOMER CREATED HASH::: " + result_<%=cid%>.getTransactionHash());
        System.out.println("CONTRACT DEPLOYED AT ADDRESS::: " + result_<%=cid%>.getContractAddress());

    org.web3j.abi.datatypes.Utf8String customerCount = customer.getTotalCustomers().sendAsync().get();


        System.out.println("CUSTOMER COUNT IS:: " + customerCount);

		 	  
<%}%>


<%
if( GET_CUSTOMER ){
%>



    org.web3j.abi.datatypes.Utf8String id_<%=cid%> = new org.web3j.abi.datatypes.Utf8String(<%=getCustId%>);

    com.test.helloworld.generated.Customer customer = com.test.helloworld.generated.Customer.load(<%=contractAddress%>,
    web3j_<%=cid%>, acc1Credentials_<%=cid%>, org.web3j.tx.Contract.GAS_PRICE, org.web3j.tx.Contract.GAS_LIMIT);

        System.out.println("Is deployed contract is valid  " + customer.isValid());

        System.out.println("Hi loaded contract address is " + customer.getContractAddress());

        System.out.println("Value stored in block " + customer.getCustomer(id_<%=cid%>).send());


    org.web3j.protocol.core.RemoteCall<org.web3j.tuples.generated.Tuple5<org.web3j.abi.datatypes.Utf8String, org.web3j.abi.datatypes.Utf8String, org.web3j.abi.datatypes.Utf8String,org.web3j.abi.datatypes.Utf8String,
    org.web3j.abi.datatypes.Utf8String>> re_<%=cid%> = customer.getCustomerDataString(id_<%=cid%>);

    org.web3j.tuples.generated.Tuple5 getdata_<%=cid%> = re_<%=cid%>.sendAsync().get();



        System.out.println("READ FROM SMART CONTRACT ID:: " + getdata_<%=cid%>.getValue1());
        System.out.println("READ FROM SMART CONTRACT NAME:: " + getdata_<%=cid%>.getValue2());
        System.out.println("READ FROM SMART CONTRACT ADDRESS:: " + getdata_<%=cid%>.getValue3());



        java.lang.String mDobStr = getdata_<%=cid%>.getValue4().toString();
        java.util.Date da = new java.util.Date(Long.valueOf(mDobStr));

        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy");


        System.out.println("READ FROM SMART CONTRACT DOB LONG:: " + getdata_<%=cid%>.getValue4());
        System.out.println("READ FROM SMART CONTRACT DOB :: " + sdf.format(da));
        System.out.println("READ FROM SMART CONTRACT AGE:: " + getdata_<%=cid%>.getValue5());

    org.web3j.abi.datatypes.Utf8String customerCount_<%=cid%> = customer.getTotalCustomers().sendAsync().get();


        System.out.println("CUSTOMER COUNT IS:: " + customerCount_<%=cid%>);

		 	  
<%}%>

<%
if( UPDATE_CUSTOMER ){
%>


 org.web3j.abi.datatypes.Utf8String id_<%=cid%> = new org.web3j.abi.datatypes.Utf8String(<%=updateCustId%>);
    org.web3j.abi.datatypes.Utf8String updateAddress_<%=cid%> = new org.web3j.abi.datatypes.Utf8String(<%=updateCustNewAdds%>);

    com.test.helloworld.generated.Customer customer = com.test.helloworld.generated.Customer.load(<%=contractAddress%>,
    web3j_<%=cid%>, acc1Credentials_<%=cid%>, org.web3j.tx.Contract.GAS_PRICE, org.web3j.tx.Contract.GAS_LIMIT);

    System.out.println("Is deployed contract is valid  " + customer.isValid());

    org.web3j.protocol.core.methods.response.TransactionReceipt result_<%=cid%> = customer.updateAddress(id_<%=cid%>, updateAddress_<%=cid%>).sendAsync().get();

    System.out.println("CUSTOMER UPDATED HASH::: " + result_<%=cid%>.getTransactionHash());

    org.web3j.abi.datatypes.Utf8String customerCount = customer.getTotalCustomers().sendAsync().get();

    System.out.println("CUSTOMER COUNT IS:: " + customerCount);

		 	  
<%}%>

<%
if( DELETE_CUSTOMER ){
%>




    org.web3j.abi.datatypes.Utf8String id_<%=cid%> = new org.web3j.abi.datatypes.Utf8String(<%=deleteCustId%>);


    com.test.helloworld.generated.Customer customer = com.test.helloworld.generated.Customer.load(<%=contractAddress%>,
    web3j_<%=cid%>, acc1Credentials_<%=cid%>, org.web3j.tx.Contract.GAS_PRICE, org.web3j.tx.Contract.GAS_LIMIT);

System.out.println("Is deployed contract is valid  " + customer.isValid());

    org.web3j.protocol.core.methods.response.TransactionReceipt result_<%=cid%> = customer.deleteCustomer(id_<%=cid%>).sendAsync().get();

System.out.println("CUSTOMER DELETED HASH::: " + result_<%=cid%>.getTransactionHash());
    org.web3j.abi.datatypes.Utf8String customerCount = customer.getTotalCustomers().sendAsync().get();

System.out.println("CUSTOMER COUNT IS:: " + customerCount);

		 	  
<%}%>








   
